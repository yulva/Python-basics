# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
# и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения
# до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.

class Cell:
    def __init__(self, amount):
        self.amount = amount

    def make_order(self, lines):
        row = ''
        for x in range(int(self.amount / lines)):
            row += f'{"*" * lines} \\n'
        row += f'{"*" * (self.amount % lines)}'
        return row

    def __str__(self):
        return f"{self.amount}"

    def __add__(self, other):
        print("The sum of cells is:")
        return Cell(self.amount + other.amount)

    def __sub__(self, other):
        print("The cells' subtraction is:")
        return Cell(self.amount - other.amount) if self.amount - other.amount > 0 \
            else "Subtraction is impossible because there are fewer cells in the first cell than in the second."

    def __mul__(self, other):
        print("The sum of multiplied cells is:")
        return Cell(self.amount * other.amount)

    def __floordiv__(self, other):
        print("The amount of cell division is:")
        return Cell(self.amount // other.amount)


cell_1 = Cell(83)
cell_2 = Cell(34)
print(cell_1 + cell_2)
print(cell_2 - cell_1)
print(cell_2 * cell_1)
print(cell_1 // cell_2)
print(cell_1.make_order(12))
print(cell_2.make_order(9))

